type NftMetadata {
    url: String
    icon: String
    desc: String
}

type NftProperty {
    authorizedEditingAccounts: [String]
    authorizedEditingContracts: [String]
    isReadOnly: Boolean!
    name: String!
    type: String!
}

type Nft {
    _id: Int!
    issuer: String!
    symbol: String!
    name: String!
    metadata: NftMetadata
    maxSupply: Int!
    supply: Int!
    circulatingSupply: Int
    delegationEnabled: Boolean!
    undelegationCooldown: Int!
    authorizedIssuingAccounts: [String]
    authorizedIssuingContracts: [String]
    properties: [NftProperty]
}

type NftDelegatee {
    account: String!
    ownedBy: String!
    undelegateAt: Int
}

type NftInstance {
    _id: Int!
    account: String
    ownedBy: String
    lockedTokens: Tuple
    properties: Tuple
    delegatedTo: NftDelegatee
}

type UserNftInstance {
    _id: Int!
    account: String
    ownedBy: String
    lockedTokens: Tuple
    properties: Tuple
    delegatedTo: NftDelegatee
    symbol: String
}

type NftParam {
    nftCreationFee: Int!
    nftIssuanceFee: Tuple!
    dataPropertyCreationFee: Int!
    enableDelegationFee: Int!
}

type Query {
    nfts(account: String, limit: Int, offset: Int): [Nft]
    nft(symbol: String!): Nft
    userNfts(account: String!, limit: Int, offset: Int): [UserNftInstance]
    nftParams: NftParam
    instances(symbol: String!, account: String): [NftInstance]
}