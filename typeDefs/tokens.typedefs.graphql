type TokenParams {
  tokenCreationFee: String!
}

type TokenMetadata {
  url: String
  icon: String
  desc: String
}

type Token @cacheControl(maxAge: 240) {
  circulatingSupply: String!
  delegationEnabled: Boolean @cacheControl(maxAge: 240)
  issuer: String! @cacheControl(maxAge: 500)
  maxSupply: Float!
  metadata: TokenMetadata
  name: String! @cacheControl(maxAge: 604800)
  numberTransactions: Int
  precision: Int! @cacheControl(maxAge: 500)
  stakingEnabled: Boolean
  supply: Float!
  symbol: String! @cacheControl(maxAge: 86400)
  totalStaked: String
  undelegationCooldown: Int
  unstakingCooldown: Int
  _id: Int! @cacheControl(maxAge: 86400)
}

type SteempBalance {
  account: String!
  balance: String!
  symbol: String!
  _id: Int!
}

type ContractTable {
  hash: String!
  nbIndexes: Int!
  size: Int!
}

type ContractTables {
  tokens_balances: ContractTable!
  tokens_contractsBalances: ContractTable!
  tokens_delegations: ContractTable!
  tokens_params: ContractTable!
  tokens_pendingUndelegations: ContractTable!
  tokens_pendingUnstakes: ContractTable!
  tokens_tokens: ContractTable!
}

type Contract {
  code: String!
  codeHash: String!
  owner: String!
  tables: ContractTables!
  version: Int!
  _id: String!
}

type Query {
  tokens(symbol: String, limit: Int, offset: Int, symbol: String, symbols: [String]): [Token!]!
  contractInfo: Contract!
  tokenParams: [TokenParams!]!
  steempBalance: SteempBalance
}
